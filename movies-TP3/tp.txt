#########################################################################
#####       				Import de fichiers .json ? 		    	#####

Q : Créer une DB movies_artists avec deux collections : une pour les films et l’autre pour les artistes (voir les fichiers .json associés) ?

Indice :
	use movies_artists 	// La création de la BD est implicite
	// La création des deux collections est implicites
	mongoimport -host localhost:27017 -d nom_db -c nom_collection --file "C:/.../movies.json" --jsonArray
	// Vérification
	db.artists.find().pretty()
	db.movies.find().pretty()

Voir document movie.py

#########################################################################
#####       				Pagination des résultats ? 		    	#####

Q : Afficher les 12 documents (films) à partir du dixième inclus ?
Indice :
	Les options skip et limit permettent de « paginer » le résultat (comme en SQL)

voir Document pagination.py

#########################################################################
#####       					 Trier les resultats ? 		    	#####

Q : Trier les documents (de la dernière qry) sur le titre du film ds un ordre croissant (ensuite décroissant) ?

Indice : utiliser sort()

voit sort.py

#########################################################################
#####       			Critères de recherche simples ? 		    #####

Q : Afficher les infos du film dont l'id est 2 ? Se limiter aux infos relatives au titre, au genre et au summary ?
Indice : utiliser findOne({"_id": "movie:2"}, {"title" : 1,...})
Projection (ramener des sous parties des documents)

Q : Combien de films ont été produit en en 1979 et les afficher en se limitant aux infos relatives au titre, à l'année et à la liste des acteurs suivant un ordre alphabétique décroissant sur le titre.
Indice : 2films : Alien et les bronzés font du ski.

Q : Afficher les infos sur le film dont le genre est "Science-fiction" et produit en 1979 sans préciser l'_id et le summary ?
Indice : Alien ! Si on choisit d’indiquer des attributs à exclure on leur donne la valeur 0 ou null !

Q : Corriger ces Qry ?

db.movies.find({"titre": "Alien"})
Indice : Ns avons mal saisit la Qry : "titre" au lieu de "title" => 0 doc.
Indice : MongoDB ne proteste pas quand on fait une faute de frappe sur des noms d’attributs (contrairement à SQL).

db.movies.find({"title": "alien"})
Indice : Ns avons mal saisit "alien" au lieu "Alien" => 0 doc (ce qui est normal). En d'autres termes, ns ne soulevons pas une erreur de syntaxe (contrairement à la Qry précédente).
Indice : On peut introduire une expression régulière pour que la recherche soit case insensitive (voir plus bas)

#########################################################################
#####       			Critères de recherche complexes ? 		    #####

# Recherche dans un objet ou un tableau imbriqué ?

Q : Combien de films produits par le director dont l'id est 4 et les afficher de plus récent au moins récent (sans le résumé ni le country ni le genre) ?
Indice : Gladiator, Blade Runer et Alien

Q : Combien de films produits par le director qui porte l'id 4 et dont l'un des acteurs a joué le rôle de Maximus et les afficher sans le résumé ni le country ni le genre ?
Indice : Gladiator

Q : Ecrire la dernière Qry en déclarant des variables ?


#########################################################################
#####       		Critère de recherche par intervalles		    #####

Q : Ts les films produits après 2000 et avant 2005 ?

#########################################################################
#####       				Opérateurs booléens		    	 	 	#####

Q : Lister les films parus en 1997 ou avec l'acteur id = 147 ?
// R :
db.movies.find({$or : [{"year": 1997}, {"actors._id": "artist:147"}] })

#########################################################################
#####       Opérateurs ensemblistes : in, not in, any, all, exists  #####

Q : Combien de films dans lesquels ont joué au moins un des artistes suivants : 34, 98 et 1 et afficher leur titre et la liste des actors ; sens du tri : chronologique et alphabétique croissant ?
Indice : Utiliser $in ; 3 films : Le parrain III, Bad Lieutenant, Reservoir dogs, Pulp fiction.

Q : Chercher les films dans lesquels ont joué ensemble les actors 23 et 147 ?
Indice : Utiliser $in ; Gladiator

Q : Combien de films dans lesquels n'ont joué ni l'acteur 34, ni 98, ni 1 et afficher leur titre et la liste des actors ; sens du tri : chronologique décroissant et alphabétique croissant ?
// Indice : 84 films ; Utiliser $in

Q : Combien de films qui n’ont pas d’attribut actors ? Combien de films dont l'attribut actors n'est pas renseigné et les afficher ?
Indice : 0 films ; 6 films



// Jointure

Q : Donnez tous les films dont le directeur est Clint Eastwood ?
// R :

eastwood = db.artists.findOne({"first_name": "Clint", "last_name": "Eastwood"})
// Rq : On dispose maintenant d’un objet eastwood. Une seconde requête sur les movies va récupérer les films dirigés par cet artiste !
db.movies.find({"director._id": eastwood['_id']}, {"title": 1})
// Rq : L'info est reconstituée en 2 étapes !

#########################################################################
#####       					 Expressions régulières ? 		    #####

Q : Tous les films dont le titre commence par 'Re' ?

Q : Tous les films dont le titre commence par 'Re' ?
// R :
db.movies.find ({"title": /^Re/}, {"actors": null, "summary": 0}).pretty()
// Rq : Pas d’apostrophes autour de l’expression régulière !

Q : Tous les films dont le titre finit par 'la' ?
db.movies.find ({"title": /la$/}, {"actors": null, "summary": 0}).pretty()

https://stackoverflow.com/questions/8246019/case-insensitive-search-in-mongo


Q : Combien de films ont été joués par l'acteur dont l'id est 147 et les afficher en se limitant au titre du film et la liste des acteurs ?

Q : Retourner les films joués par l'acteur' 147 sans les acteurs et sans le résumé ?
